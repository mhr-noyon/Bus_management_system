package ooppp_project;

import java.awt.Color;
import java.awt.ComponentOrientation;
import static java.lang.Math.abs;
import static java.lang.Math.ceil;
import java.sql.*;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import table.*;
import scroll.*;
//
class buses{
    public static HashMap<Float,String> Buses = new HashMap<>();
        public static HashMap BusList(){
          Buses = JDBC.busList();
            //System.out.println("Initial Mappings are: " + Buses);
            return Buses;
        }
     
}

public class FindBus extends javax.swing.JFrame {

    /**
     * Creates new form HomePage
     */
    public FindBus() {
        this.setResizable(false);
        this.setTitle("Search Bus");
        initComponents();
        addItmToJComboPresent();
        addItmToJComboDestination();
            // System.out.println(""+jCBPresentStoppage.getName());   
        getContentPane().setBackground(Color.WHITE);
        TableCustom.apply(jScrollPaneBusList, TableCustom.TableType.MULTI_LINE);

//        jTableBusList.setShowHorizontalLines(true); // only HorizontalLines
//        jTableBusList.setShowVerticalLines(true); //  only VerticalLines
//        jTableBusList.setShowGrid(true);          // show Horizontal and Vertical
//        jTableBusList.setGridColor(Color.BLUE);
  
    }
    void addItmToJComboPresent(){
        AutoCompleteDecorator.decorate(jCBPresentStoppage);
        jCBPresentStoppage.removeAllItems();
        Connection con ;
        Statement st;
        ResultSet rs;
        try {
            con = JDBC.getConnection();
            st = con.createStatement();
            rs = st.executeQuery("Select * from StoppagesList");
            while(rs.next()){
                jCBPresentStoppage.addItem(rs.getString("name"));
            }
        } catch (Exception e) {
            System.out.println(""+e.getMessage());
        }
    }
    void addItmToJComboDestination(){
        AutoCompleteDecorator.decorate(jCBDestinationStoppage);
        jCBDestinationStoppage.removeAllItems();
        Connection con ;
        Statement st;
        ResultSet rs;
        try {
            con = JDBC.getConnection();
            st = con.createStatement();
            rs = st.executeQuery("Select * from StoppagesList");
            while(rs.next()){
                jCBDestinationStoppage.addItem(rs.getString("name"));
            }
        } catch (Exception e) {
            System.out.println(""+e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jCBPresentStoppage = new javax.swing.JComboBox<>();
        jCBDestinationStoppage = new javax.swing.JComboBox<>();
        jScrollPaneBusList = new javax.swing.JScrollPane();
        jTableBusList = new javax.swing.JTable();
        btnSelectBus = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HomePage");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(102, 0, 204));
        jPanel1.setMaximumSize(new java.awt.Dimension(800, 1000));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 1000));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel11.setIcon(new javax.swing.ImageIcon("C:\\Users\\User\\Downloads\\bus logo1.png")); // NOI18N
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 0, -1, 96));

        jButton5.setBackground(new java.awt.Color(0, 0, 0));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("LOG OUT");
        jButton5.setFocusPainted(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 20, 101, -1));

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 255, 102), new java.awt.Color(0, 255, 204), null, null));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        jLabel2.setText("Present Stoppage:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 20)); // NOI18N
        jLabel1.setText("Destination:");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 170, 40));

        btnSearch.setBackground(new java.awt.Color(0, 102, 255));
        btnSearch.setFont(new java.awt.Font("Trebuchet MS", 1, 20)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("SEARCH BUS");
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.setFocusPainted(false);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel2.add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 120, 480, 42));

        jCBPresentStoppage.setFont(new java.awt.Font("Open Sans Medium", 0, 18)); // NOI18N
        jCBPresentStoppage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBPresentStoppageActionPerformed(evt);
            }
        });
        jCBPresentStoppage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCBPresentStoppageKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jCBPresentStoppageKeyTyped(evt);
            }
        });
        jPanel2.add(jCBPresentStoppage, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, 270, 40));

        jCBDestinationStoppage.setFont(new java.awt.Font("Open Sans Medium", 0, 18)); // NOI18N
        jCBDestinationStoppage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBDestinationStoppageActionPerformed(evt);
            }
        });
        jPanel2.add(jCBDestinationStoppage, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 70, 270, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 510, 170));

        jTableBusList.setFont(new java.awt.Font("Open Sans Medium", 0, 18)); // NOI18N
        jTableBusList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BUS NAME", "COST (TK)", "DISTANCE (km)", "PATH"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneBusList.setViewportView(jTableBusList);
        if (jTableBusList.getColumnModel().getColumnCount() > 0) {
            jTableBusList.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTableBusList.getColumnModel().getColumn(1).setPreferredWidth(40);
            jTableBusList.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTableBusList.getColumnModel().getColumn(3).setPreferredWidth(230);
        }

        jPanel1.add(jScrollPaneBusList, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 234, 740, 310));

        btnSelectBus.setBackground(new java.awt.Color(0, 102, 255));
        btnSelectBus.setFont(new java.awt.Font("Rockwell", 0, 24)); // NOI18N
        btnSelectBus.setForeground(new java.awt.Color(255, 255, 255));
        btnSelectBus.setText("BUY TICKET");
        btnSelectBus.setFocusPainted(false);
        btnSelectBus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectBusActionPerformed(evt);
            }
        });
        jPanel1.add(btnSelectBus, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 550, 290, 50));

        btnBack.setBackground(new java.awt.Color(0, 0, 0));
        btnBack.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("BACK");
        btnBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBack.setFocusPainted(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jPanel1.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, 100, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 820, 610));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String presentPlace= (String)jCBPresentStoppage.getSelectedItem();
        String destinationPlace= (String)jCBDestinationStoppage.getSelectedItem();
        
        DefaultTableModel tblModel = (DefaultTableModel)jTableBusList.getModel();
        tblModel.getDataVector().removeAllElements();
        jTableBusList.setRowHeight(30);
        TableColumnModel cm = jTableBusList.getColumnModel();
        cm.getColumn(3).setPreferredWidth(250);
        revalidate();
        if(presentPlace.equals(destinationPlace)){
            JOptionPane.showMessageDialog(this, "Please select a different destination place");
        }
        else if(presentPlace.equals("")||destinationPlace.equals("")){
            JOptionPane.showMessageDialog(this, "Please fill the Box");
        }
        else{
           // DefaultTableModel tblModel = (DefaultTableModel)jTableBusList.getModel();
            HashMap<Float,String> pathMeghla ;
            pathMeghla = buses.BusList();
            path buses = new path();
             for (Map.Entry<Float,String> mapElement : pathMeghla.entrySet()) {
                float costPkm = mapElement.getKey(); //cost per km
                String busName= mapElement.getValue();
                int distance = buses.availBus(busName,presentPlace,destinationPlace);
                if(distance!=0){
                   // tblModel.addRow(new Object[]{"Meghla",String.valueOf(ceil(buses.meghla(presentPlace,destinationPlace)*2.8)),String.valueOf(buses.meghla(presentPlace,destinationPlace)),"NULL"});
                  tblModel.setValueAt(busName,jTableBusList.getRowCount()-1, 0);
                  //System.out.println("From; "+jTableBusList.getRowCount());
                  tblModel.setValueAt(String.valueOf((int)ceil((distance*costPkm))), jTableBusList.getRowCount()-1, 1);              
                  tblModel.setValueAt(String.valueOf(distance), jTableBusList.getRowCount()-1, 2);

                }
            }
            
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    public class path{
        
        void getPath(int serial1, int serial2,String busName){
            String queryRead = "select * from "+busName;        
            int x,y ;
            if(serial1<serial2) {x = serial1; y = serial2;}
            else {x = serial2; y = serial1;}
            Connection con = JDBC.getConnection();
            DefaultTableModel tblModel = (DefaultTableModel)jTableBusList.getModel();
            try{
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(queryRead);  
                int print = 0;
                String path = "" ;
                while(rs.next()){
                     if(rs.getInt("serial")>=x && rs.getInt("serial")<=y){
                        // if(rs.getInt("serial")==y)                        
                        if(rs.getInt("serial")==x){
                            path = rs.getString("StationName");
                        }
                        else{
                              if(serial1<serial2) path = path+" --> "+rs.getString("StationName");
                              else path = rs.getString("StationName")+ " -> "+path;
                         }
                        //System.out.println(""+path);
                        print++;
                    }
                     else if(rs.getInt("serial")>y) break;
                }
                tblModel.addRow(new Object[]{"null","null","null","null"});
                //System.out.println(""+jTableBusList.getRowCount());
                tblModel.setValueAt(path,jTableBusList.getRowCount()-1,3);
            }
            catch(SQLException e){
                        JOptionPane.showMessageDialog(null,e.getMessage());  
                    }
            catch(Exception e){
                 JOptionPane.showMessageDialog(null,e.getMessage());  
            }
        }
        int availBus(String busName, String keyPresent, String keyDestination){
             String queryRead1 = "select * from "+busName+" where stationName = '"+keyPresent+"'";
             String queryRead2 = "select * from "+busName+" where stationName = '"+keyDestination+"'";
             float b, a;
             int serial1, serial2;
                //System.out.println("ok");
            Connection con = JDBC.getConnection();
            Statement st = null;
            ResultSet rs1 = null;            
            ResultSet rs2 = null;
            
            try{
                st = con.createStatement();
                rs1 = st.executeQuery(queryRead1);   
                
                if(rs1.next()){
                    a = rs1.getFloat("Distance");
                    serial1 = rs1.getInt("serial");
                    //System.out.println(""+rs1.getFloat("Distance"));  
                          
                    rs2 = st.executeQuery(queryRead2);
                    if(rs2.next())
                        try{
                            b = rs2.getFloat("Distance");
                            serial2 = rs2.getInt("serial");
                                getPath(serial1,serial2, busName);
                            return (int) ceil(abs(a-b));
                        }
                    catch(SQLException e){
                         JOptionPane.showMessageDialog(null,e.getMessage());  
                    }
                    catch(Exception e){
                        JOptionPane.showMessageDialog(null,e.getMessage());  
                    }
                    //System.out.println(""+rs2.getFloat("Distance"));
                    con.close();
                    st.close();
                    rs1.close();
                }
                else return 0;
            }catch(Exception e){
                 JOptionPane.showMessageDialog(null,e.getMessage());      
            }
            return 0;
        }
        
     /* int Meghla(String keyPresent, String keyDestination){
            String queryRead = "select * from meghla";
        HashMap<String, Float> pathMeghla = new HashMap<>();
        Connection con = getConnection();
        Statement st = null;
        ResultSet rs = null;
        //buses bus;
        try{
            st = con.createStatement();
            rs = st.executeQuery(queryRead);
            while(rs.next()){
                 //int serial = rs.getInt("serial");
                 String stationName = rs.getString("StationName");
                 float distance = rs.getFloat("Distance");
                 //bus = new buses(serial,stationName,distance);
                 pathMeghla.put(stationName, distance);
            }
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
           
           System.out.println("Initial Mappings are: " + pathMeghla);
           /*
            HashMap<String,Integer> pathMeghla = new HashMap<>();
   
            // Mapping string values to int keys
            pathMeghla.put("Gulistan",0);
            pathMeghla.put("Shonir Akhra",6);
            pathMeghla.put("Sineboard",8);            
            pathMeghla.put("Chittagang Road",10);
            pathMeghla.put("Kachpur",11);
            pathMeghla.put("Rupshi",14);
            pathMeghla.put("Gawsia",18);
            // Displaying the HashMap
            System.out.println("Initial Mappings are: " + pathMeghla);

            // Getting the value of Gawsia
            System.out.println("The Value is: " + pathMeghla.get(key));
            
            if(pathMeghla.containsKey(keyDestination) && pathMeghla.containsKey(keyPresent)){
                //return distance value so that we can calculate cost
                return (int) ceil( abs(pathMeghla.get(keyDestination)-pathMeghla.get(keyPresent)));
            }
            else return 0;
            
       }
       int ModinarPothe(String keyPresent,String keyDestination){
            HashMap<String,Integer> pathModinarPothe = new HashMap<>();
   
            // Mapping string values to int keys
            pathModinarPothe.put("Saydabad",0);
            pathModinarPothe.put("Jatrabari",2);
            pathModinarPothe.put("Shonir Akhra",7);
            pathModinarPothe.put("Sineboard",11);            
            pathModinarPothe.put("Chittagang Road",13);
            pathModinarPothe.put("Kachpur",14);
            pathModinarPothe.put("Rupshi",17);
            pathModinarPothe.put("Gawsia",21);
            // Displaying the HashMap
            //System.out.println("Initial Mappings are: " + pathModinarPothe);

            // Getting the value of Gawsia
             if(pathModinarPothe.containsKey(keyDestination) && pathModinarPothe.containsKey(keyPresent)){
                //return distance value so that we can calculate cost
                return abs(pathModinarPothe.get(keyDestination)-pathModinarPothe.get(keyPresent));
            }
            else return 0;
       }
       int Shodesh(String keyPresent,String keyDestination){
            HashMap<String,Integer> pathShodesh = new HashMap<>();
   
            // Mapping string values to int keys
            pathShodesh.put("Gulistan",0);
            pathShodesh.put("Sineboard",8);            
            pathShodesh.put("Chittagang Road",10);
            pathShodesh.put("Modonpur",15);
            pathShodesh.put("Sonargaon",17);
            pathShodesh.put("Vober Chor",23);
            pathShodesh.put("Cumilla",28);
    
            // Displaying the HashMap
           // System.out.println("Initial Mappings are: " + pathShodesh);

             if(pathShodesh.containsKey(keyDestination) && pathShodesh.containsKey(keyPresent)){
                //return distance value so that we can calculate cost
                return abs(pathShodesh.get(keyDestination)-pathShodesh.get(keyPresent));
            }
            else return 0;
       }
       int Bondhu(String keyPresent, String keyDestination){
            HashMap<String,Integer> pathBondhu = new HashMap<>();
   
            // Mapping string values to int keys
            pathBondhu.put("Chashara",0);
            pathBondhu.put("Sibu Market",2);            
            pathBondhu.put("Fotulla Stadium",4);
            pathBondhu.put("Jalkuri",6);
            pathBondhu.put("Vui ghor",8);
            pathBondhu.put("Sineboard",9);
            pathBondhu.put("Mouchak",12);
            pathBondhu.put("Chittagong Road",15);
    
            // Displaying the HashMap
           // System.out.println("Initial Mappings are: " + pathBondhu);

            
            if(pathBondhu.containsKey(keyDestination) && pathBondhu.containsKey(keyPresent)){
                //return distance value so that we can calculate cost
                return abs(pathBondhu.get(keyDestination)-pathBondhu.get(keyPresent));
            }
            else return 0;
       }*/
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int res = JOptionPane.showConfirmDialog(this, "Are you sure?", "CONFIRM", JOptionPane.YES_NO_OPTION);
            if(res==0){
                login loginFrame=new login();
                loginFrame.setVisible(true);
                loginFrame.pack();
                loginFrame.setLocationRelativeTo(null);
                this.dispose();
            }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void btnSelectBusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectBusActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tblModel = (DefaultTableModel)jTableBusList.getModel();
        if(jTableBusList.getSelectedRowCount()==1){
           String busName = jTableBusList.getValueAt(jTableBusList.getSelectedRow(), 0).toString();
           String busCost = jTableBusList.getValueAt(jTableBusList.getSelectedRow(), 1).toString();
           String path = jTableBusList.getValueAt(jTableBusList.getSelectedRow(), 3).toString();
           String from = (String)jCBPresentStoppage.getSelectedItem();       
            String to = (String)jCBDestinationStoppage.getSelectedItem();
           
           
            busList confirmPage = new busList();
            confirmPage.setVisible(true);
            confirmPage.pack();
            confirmPage.setLocationRelativeTo(null);
            confirmPage.txtBusName.setText(busName);
            confirmPage.txtBusCost.setText(busCost);
            confirmPage.txtBusFrom.setText(from);
            confirmPage.txtBusTo.setText(to);            
            busList.txtPath.setText(path);
            this.dispose();
        }
        else{
             if(jTableBusList.getRowCount()==0)
                 JOptionPane.showMessageDialog(this,"Please Search for a bus!"); 
             else if(jTableBusList.getSelectedRowCount()==0){
                 JOptionPane.showMessageDialog(this,"Select a Bus first...");                       
             }
         }
    }//GEN-LAST:event_btnSelectBusActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        HomePage back=new HomePage();
        back.setVisible(true);
        back.pack();
        back.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void jCBPresentStoppageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBPresentStoppageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBPresentStoppageActionPerformed

    private void jCBDestinationStoppageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBDestinationStoppageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBDestinationStoppageActionPerformed

    private void jCBPresentStoppageKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCBPresentStoppageKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBPresentStoppageKeyTyped

    private void jCBPresentStoppageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCBPresentStoppageKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBPresentStoppageKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FindBus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FindBus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FindBus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindBus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new FindBus().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelectBus;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jCBDestinationStoppage;
    private javax.swing.JComboBox<String> jCBPresentStoppage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPaneBusList;
    public static javax.swing.JTable jTableBusList;
    // End of variables declaration//GEN-END:variables

    void setEditable(boolean b) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
